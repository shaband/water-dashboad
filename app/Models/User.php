<?php

namespace App\Models;

use App\Traits\CanBlock;
use Illuminate\Contracts\Auth\MustVerifyEmail;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;

class User extends Authenticatable
{

    use HasFactory, Notifiable, CanBlock;

    protected static function booted()
    {
        parent::booted(); // TODO: Change the autogenerated stub

        static::creating(function (User $user) {
            $user->phone_confirmation_code = $user->generatePhoneConfirmationCode();
        });


        static::updating(function (User $user) {

            if ($user->isDirty('phone')) {
                $user->phone_verified_at = null;
                $user->phone_confirmation_code = $user->generatePhoneConfirmationCode();

            }
        });

    }

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        'name', 'email', 'phone', 'phone_confirmation_code', 'password', 'lat', 'lng', 'phone_verified_at', 'blocked_at', 'city_id', 'image',
    ];

    /**
     * The attributes that should be hidden for arrays.
     *
     * @var array
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast to native types.
     *
     * @var array
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
    ];

    /**
     * @return BelongsTo
     */
    public function city(): BelongsTo
    {
        return $this->belongsTo(City::class, 'city_id');
    }

    public  function  messages(){

        return $this->morphMany(Message::class,'sender');
    }

    public function setPasswordAttribute($value)
    {
        $this->attributes['password'] = \Hash::make($value);
    }

    public function generatePhoneConfirmationCode()
    {
        return str_pad(rand(00000, 99999), 5, '0', STR_PAD_LEFT);
    }



    public function scopeStatistics(Builder  $builder):void
    {
        $builder->selectRaw('count(*)  as total')
            ->selectRaw('count(case when blocked_at is null then 1 end) as active')
            ->selectRaw("count(case when blocked_at is Not Null then 1 end) as blocked");

    }

}
